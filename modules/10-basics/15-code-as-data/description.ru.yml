---

name: Код как данные
theory: |

  Первый вопрос, который возникает глядя на Racket-программу – почему такая странная запись вызова функции? Вместо привычного: `display("eat me")`, мы видим: `(display "eat me")`.

  Причины такой записи лежат в идее, которая стоит за всеми Lisp-языками. Название "Lisp" расшифровывается как LISt Processor (обработка списков). [Односвязный список](https://en.wikipedia.org/wiki/Linked_list) основная структура данных в этих языках. Более того, любая программа на Lisp-языке сама по себе список! Посмотрите еще раз на эту программу:

  ```scheme
  (display "eat me")
  ```

  С одной стороны это вызов функции `display` со строковым аргументом "eat me". С другой, это список из двух элементов: display и "eat me". Сейчас будет немного примеров. Не пытайтесь их понять как код, мы еще не готовы к этому. Смотрите на них как на обычные списки. 

  ```scheme
  (+ 1 2) ; сложение или список из трех элементов
  (define count 0) ; определение переменной или список из трех элементов
  (+ 100 3 8 9) ; сложение или список из 5 элементов
  ```

  Списки могут быть вложенными. В такой форме вместо конкретного значения подставляется новый список `()`:

  ```scheme
  (+ 1 (- 3 2)) ; сложение или список из трех элементов, в котором третий элемент список из трех элементов
  (- (* 3 3) (- 2 3) (+ 5 1)) ; вычитание или список из 4 элементов
  ```

  Список - рекурсивная структура данных. Любой элемент может быть списком и содержать внутри себя элементы-списки. В Lisp-языках списки используются для представленя и кода и данных. Ниже пример полноценной Racket программы:

  ```scheme
  (define (square x) (expt x 2))

  (define (squarer xs)
    (if (empty? xs)
        empty
        (cons (square (first xs)) (squarer (rest xs)))))

  (squarer '(1 2 3 4 5)) ; '(1 4 9 16 25))
  ```

  Код выглядит непривычно и не очень понятно, но попробуйте поменять угол зрения. Посмотрите на эту программу как на структуру данных. Проследите за тем как списки вкладываются друг в друга и форматируются.

  В этом моменте проявляется одна из ключевых особенностей любого Lisp-языка: код на Lisp одновременно является данными на Lisp языке (говорят "код как данные"). Это свойство назыавется гомиконностью и является визитной карточкой Lisp. В гомоиконных языках текст программы имеет такую же структуру как и ее абстрактное синтаксическое дерево.

  Возможно вас интересует вопрос, зачем это нужно? Гомоиконность дает возможность использовать макросы, написанные на самом языке. Механизм макросов в Lisp-языках - одна из мощнейших вещей в программировании вообще.

instructions: |

  Напишите программу, которая выводит на экран сумму чисел 5 и 10

  ```scheme
  (display (+ 5 10))
  ```

definitions:
  - name: Гомоиконность
    description: свойство некоторых языков программирования, в которых текст программы одновременно может рассматриваться как структура данных этого же языка.

tips: []
