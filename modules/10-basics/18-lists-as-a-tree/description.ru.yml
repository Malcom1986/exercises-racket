---

name: Списки как дерево
theory: |

  Списки могут быть вложенными. В такой форме вместо конкретного значения подставляется новый список `()`:

  ```scheme
  (+ 1 (- 3 2)) ; сложение или список из трех элементов, в котором третий элемент список из трех элементов
  (- (* 3 3) (- 2 3) (+ 5 1)) ; вычитание или список из 4 элементов
  ```

  _Вопрос для самоконтроля. Сколько элементов в списке ((3) 8 (7 9))?_

  Список - рекурсивная структура данных. Любой элемент может быть списком и содержать внутри себя элементы-списки. Ниже пример полноценной Racket программы:

  ```scheme
  ; В конце этого курса вы сможете не только понять этот код, но и написать его самостоятельно
  (define (square x) (expt x 2))

  (define (squarer xs)
    (if (empty? xs)
        empty
        (cons (square (first xs)) (squarer (rest xs)))))

  (squarer '(1 2 3 4 5)) ; '(1 4 9 16 25))
  ```

  Код выглядит непривычно и не очень понятно, но попробуйте поменять угол зрения. Посмотрите на эту программу как на структуру данных. Проследите за тем как списки вкладываются друг в друга и форматируются.

  В этом моменте проявляется одна из ключевых особенностей любого Lisp-языка: код на Lisp одновременно является данными на Lisp языке (говорят "код как данные"). Это свойство назыавется гомиконностью и является визитной карточкой Lisp. В гомоиконных языках текст программы имеет такую же структуру как и ее абстрактное синтаксическое дерево.

  Возможно вас интересует вопрос, зачем это нужно? Гомоиконность дает возможность использовать макросы, написанные на самом языке. Механизм макросов в Lisp-языках - одна из мощнейших вещей в программировании вообще.

instructions: |

  Напишите программу, которая выводит на экран разность чисел 128 и 37

  ```scheme
  (display (- 128 37))
  ```

definitions:
  - name: Гомоиконность
    description: свойство некоторых языков программирования, в которых текст программы одновременно может рассматриваться как структура данных этого же языка.

tips: []
