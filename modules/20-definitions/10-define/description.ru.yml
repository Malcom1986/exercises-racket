---

name: Определение символов
theory: |

  Racket не функциональный язык программирования. В нем есть настоящие переменные, которые можно изменять. Переменные создаются с помощью конструкции `define` и называются определениями.

  ```scheme
  (define id expr)
  ; id - идентификатор
  ; expr - выражение
  ```

  Например:

  ```scheme
  ; define создает "определение".
  (define lang "racket")
  (displayln lang) ; => "racket"
  ```

  Значением определения может быть как нормальная форма (значение) так и составная:

  ```scheme
  (define result (+ 7 (- 4 6)))
  (displayln result) ; 5
  ```


  define связывает имя (идентификатор) и значение следующего за ним выражения.

  Имена определений, состоящие из нескольких слов, соединяют с помощью дефиса. В Lisp языках повсеместно принят kebab-case.

  ```scheme
  (define dangerous-year 1984)
  (displayln dangerous-year) ; => 1984
  ```

  Для изменения значения определения используется функция `set!`:

  ```scheme
  (set! lang "scheme")
  (displayln lang) ; => "scheme"
  ```

  В общем случае использовать `set!` не рекомендуется. Racket отлично поддерживает функциональную парадигму и всячески ее поощрает. Код с переменными, практически всегда легко заменяется на код с констнатами.

instructions: |

  Создайте определение обозначающее "количество участников" (имя соорудите сами), присвойте ем значение 100 и распечатайте на экран.

tips: []
