---

name: Определение символов
theory: |

  Racket не функциональный язык программирования. В нем есть настоящие переменные, которые можно изменять. Переменные создаются с помощью конструкции `define`:

  ```scheme
  (define id expr)
  ; id - идентификатор
  ; expr - выражение
  ```

  Например:

  ```scheme
  ; define создает "определение".
  (define lang "racket")
  (displayln lang) ; => "racket"
  ```


  И хотя я назвал идентификаторы переменными, в Lisp языках используется другая терминология. В Racket, идентификаторы в определениях принято называть символами. В обычных языках, идентификатор очень четкое понятие. Обращение к идентификатору будь то имя функции или имя переменной, всегда приводит к поиску и подстановке того, что скрывается за идентификатором. В Lisp символ становится идентификатором только при определенных условиях. Например если передать его в функцию `displayln`. В этот момент произойдет поиск соответствующего ему значения, которое подставится на место идентификатора. Но есть ситуации, в которых идентификатор будет просто символом, который обозначает сам себя (почти как строка, но без кавычек).

  ```scheme
  (string-appen)
  ```

  Переменные, состоящие из нескольких слов, соединяют с помощью дефиса. В Lisp языках повсеместно принят kebab-case.

  ```scheme
  (define dangerous-year 1984)
  (displayln dangerous-year) ; => 1984
  ```

  Значением переменной может быть не только вычисленное значение, но и любое выражение:

  ```scheme
  (define result (+ 7
                    (- 4 6)))
  (displayln result) ; 5
  ```

  Для изменения переменных используется конструкция `set!`:

  ```scheme
  (set! lang "scheme")
  (displayln lang) ; => "scheme"
  ```

  В общем случае использовать `set!` не рекомендуется. Racket отлично поддерживает функциональную парадигму и всячески ее поощрает. В процессе мы познакомимся со всеми необходимыми элементами.

instructions: |

  Создайте переменную обозначающую "количество участников" (имя соорудите сами), присвойте ей значение 100 и распечатайте на экран.

tips: []
