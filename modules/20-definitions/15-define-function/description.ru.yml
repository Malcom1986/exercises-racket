---

name: Создание и вызов функций
theory: |

  Функции в Racket обладают следующими свойствами:

  * У функций нет имен. Во многих языках такие функции соответствуют анонимным функциям или лямбда-функциям.
  * Функции являются объектами первого рода. Их можно присваивать переменным, передавать в другие функции и возвращать из функций

  Примеры:

  ```scheme
  ; определение функции вычисляющую сумму двух чисел
  (lambda (x y) (+ x y))
  ```

  В примере выше определяется функция, за это отвечает `lambda`. Вторым элементом в форме объявления функции идут аргументы. Аргументы передаются также списком. Третий и последующие элементы - тело функции. То есть тело может состоять из нескольких выражений:

  ```scheme
  (lambda ()
          (displayln "one")
          (displayln "two"))
  ```

  Обратите внимание на отсутствие инструкции `return`. В отличие от большинства других языков, в Lisp языках инструкций практически нет. Все есть выражение. А выражения всегда возвращают результат. Если хорошо подумать, то такое поведение следует из самой структуры Lisp программы. Фактически мы имеем дерево, которое должно вычислиться в какое-то значение, значит на каждом уровне должен создаваться возврат, поднимающийся выше по дереву и так до самого корня. Возвращается всегда _последнее вычисленное выражение_.

  Пара примеров для закрепления:

  ```scheme
  ; печать на экран
  (lambda () (displayln "hello!"))
  ; квадрат числа
  (lambda (n) (* n n))

  ; среднее между двумя числами
  (lambda (num1 num2) (/ (+ num1 num2) 2))
  ```

  Раз функция объект первого рода, то мы можем определить символ:

  ```scheme
  (define square (lambda (n) (* n n)))
  ```

  Теперь попробуем вызвать:

  ```scheme
  (square 7) ; 49
  (square 5) ; 25
  ```

instructions: |

  Создайте функцию с именем `cube`, которая вычисляет куб переданного числа

  ```scheme
  (cube 3) ; 9
  ```

definitions:
  - name: Объект первого рода
    description: Сущность в языке, которая рассматривается как данные. Это значит что ее можно записывать в переменную, передавать в функции и возвращать из функций.
tips: []
