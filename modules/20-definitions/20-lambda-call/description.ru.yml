---

name: Вызов функции без define
theory: |

  Вспомним функцию `square` из прошлого урока:

  ```scheme
  (define square (lambda (n) (* n n)))
  (square 5) ; 25
  ```

  Попробуйте ответить на вопрос. Можно ли вызывать лямбду сразу после определения без использования `define`?

  Конечно можно, как и во всех других языках с поддержкой лямбд. Для этого достаточно, в вызове, подставить вместо имени саму функцию:

  ```scheme
  ((lambda (n) (* n n)) 5)
  ```

  Необычность этой структуры в том, что здесь первый элемент не идентификатор, а выражение возвращающее функцию (а определение функции возвращает саму функцию). Из-за этого возникает двойная скобка. Проще всего это понять если всегда относиться к скобкам как к вызову. В дальнейшем, при работе со списками как с данными, мы увидим что это не всегда так, но пока не берем их в рассчет.

  После определения функции перечисляются параметры. В данном примере параметр только один, это 5. Ниже пример для двух аргументов:

  ```scheme
  ((lambda (x y) (+ x y))
   8 7) ; 15
  ```

  Вызов функции - обычное выражение, это значит что его можно использовать во всех местах, где возможно появление выражения. В Lisp-языках это почти любые части программы:

  ```scheme
  (display ((lambda (x y) (+ x y))
            8 7)) ; => 15
  ```

instructions: |

  1. Определите (без создания переменной) и вызовите функцию, которая находит среднее арифметическое между двумя числами. В качестве чисел подставьте 2 и 4.
  2. Запишите результат в переменную.
  3. Выведите переменную на экран.

definitions: []
