---

name: Определение локальных переменных
theory: |

  `define` в Racket может использоваться как на уровне модуля, так и внутри функций:

  ```scheme
  (define (f)
    (define text "lorem")
    (displayln text))

  (f) ; => "lorem"
  ; у define локальная область видимости
  (displayln text) ; error
  ```

  Но с ним связано несколько тонких моментов:

  * Хотя лиспы похожи между собой, конкретно `define` ведет себя совершенно по разному в разных диалектах Scheme. В некоторых он создает локальную область видимости, в других его определение всегда глобально относительно модуля.
  * Определение переменных должно идти в самом начале функции, до любых других выражений.

  Существует и другой способ определять локальные переменные, гораздо более популярный и предсказуемый:

  ```scheme
  ; определяется локальная переменная x и затем она умножается на два
  (let ([x 5]) (* x 2))
    ```

  Все переменные определенные внутри `let`, доступны только в выражениях, которые вызываются внутри самого `let` после определения переменных (вторым элементом списка). Ниже более сложный пример, с определением двух переменных:

  ```scheme
  (let ([x 2]
        [y (+ 4 3)])
    (+ x y)) ; 9
  ```

  Каждое определение `let` записывается в квадратных скобках, где первый элемент - имя переменной, второй - выражение, результат которого запишется в переменную. Напишем функцию, которая считает сумму квадратов двух чисел, используя локальные переменные:

  ```scheme
  (define (sum-of-squares x y)
    (let ([x-square (* x x)]
          [y-square (* y y)])
      (+ x-square y-square)))
  ```

  Можно пойти еще дальше и определить локальную функцию, которая выполняет возведение в квадрат

  ```scheme
  (define (sum-of-squares x y)
    (let ([square (lambda (n) (* n n))])
      (+ (square x) (square y))))
  ```

instructions: |

  Реализуйте функцию `square-of-sum`, которая сначала складывает числа, а затем возводит в квадрат. Воспользуйтесь локальными переменными для хранения промежуточных результатов вычисления.

  ```scheme
  (square-of-sum 2 3) ; 25
  ```

definitions: []
tips: []
